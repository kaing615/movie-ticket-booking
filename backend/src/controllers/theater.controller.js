import Theater from "../models/theater.model.js";
import User from "../models/user.model.js";
import TheaterSystem from "../models/theaterSystem.model.js";
import responseHandler from "../handlers/response.handler.js";
import mongoose from "mongoose";

const aggregateTheatersBySystem = async () => {
	try {
		const pipeline = [
			{
				$match: {
					isDeleted: false,
				},
			},
			{
				$group: {
					_id: "$theaterSystemId",
					theaters: {
						$push: {
							_id: "$_id",
							managerId: "$managerId",
							theaterName: "$theaterName",
							location: "$location",
						},
					},
					theaterCount: { $sum: 1 },
				},
			},
			{
				$lookup: {
					from: TheaterSystem.collection.name,
					localField: "_id",
					foreignField: "_id",
					as: "systemInfo",
				},
			},
			{
				$unwind: {
					path: "$systemInfo",
					preserveNullAndEmptyArrays: true,
				},
			},
			{
				$project: {
					_id: 0, // Exclude the default _id generated by $group
					theaterSystemId: "$_id", // Rename the grouped _id back to theaterSystemId for clarity in output
					theaterSystemName: "$systemInfo.name", // Assuming TheaterSystem has a 'systemName' field
					theaterSystemCode: "$systemInfo.code", // Assuming TheaterSystem has a 'location' field
					theaterSystemLogo: "$systemInfo.logo",
					theaters: "$theaters",
					totalTheaters: "$theaterCount",
				},
			},
		];

		const aggregatedTheaters = await mongoose
			.model("Theater")
			.aggregate(pipeline);
		return aggregatedTheaters;
	} catch (error) {
		console.error("Error aggregating theaters by system:", error);
		throw error;
	}
};

const getTheatersBySystem = async (req, res) => {
	try {
		const theaters = await aggregateTheatersBySystem();
		return responseHandler.ok(res, theaters);
	} catch (error) {
		return responseHandler.serverError(
			res,
			error.message || "Unknown server error."
		);
	}
};

const createTheater = async (req, res) => {
	try {
		const { managerId, theaterName, location, theaterSystemId } = req.body;

		const nameTaken = await Theater.findOne({
			theaterName,
		});
		if (nameTaken) {
			return responseHandler.badRequest(res, "Tên rạp đã được sử dụng");
		}

		const manager = await User.findOne({
			_id: managerId,
			isDeleted: false,
		});
		if (!manager) {
			return responseHandler.notFound(
				res,
				"Không tìm thấy người dùng quản lý."
			);
		}

		if (manager.role !== "theater-manager") {
			return responseHandler.badRequest(
				res,
				"Người dùng không phải là theater-manager."
			);
		}

		const existingTheater = await Theater.findOne({
			managerId,
			isDeleted: false,
		});
		if (existingTheater) {
			return responseHandler.badRequest(
				res,
				"Người quản lý này đã được phân công cho một rạp khác."
			);
		}

		const system = await TheaterSystem.findById(theaterSystemId);
		if (!system) {
			return responseHandler.notFound(
				res,
				"Không tìm thấy hệ thống rạp."
			);
		}

		const existed = await Theater.findOne({ theaterName });
		if (existed) {
			return responseHandler.badRequest(res, "Tên rạp đã tồn tại.");
		}

		const theater = new Theater({
			managerId,
			theaterName,
			location,
			theaterSystemId,
		});

		await theater.save();

		return responseHandler.created(res, {
			message: "Tạo rạp chiếu phim thành công!",
			theater,
		});
	} catch (err) {
		console.error("Lỗi tạo rạp:", err);
		responseHandler.error(res);
	}
};

// Cập nhật rạp chiếu phim
const updateTheater = async (req, res) => {
	try {
		const { theaterId } = req.params;
		const { theaterName, location, managerId, theaterSystemId } = req.body;

		const theater = await Theater.findById(theaterId);
		if (!theater || theater.isDeleted) {
			return responseHandler.notFound(res, "Không tìm thấy rạp.");
		}

		if (theaterName) {
			const nameTaken = await Theater.findOne({
				theaterName,
				_id: { $ne: theaterId },
			});
			if (nameTaken) {
				return responseHandler.badRequest(
					res,
					"Tên rạp đã được sử dụng."
				);
			}
			theater.theaterName = theaterName;
		}

		if (location) theater.location = location;

		if (managerId) {
			const manager = await User.findOne({
				_id: managerId,
				role: "theater-manager",
				isDeleted: false,
			});
			if (!manager) {
				return responseHandler.notFound(res, "Không tìm thấy quản lý.");
			}
			theater.managerId = managerId;
		}

		if (theaterSystemId) {
			const system = await TheaterSystem.findById(theaterSystemId);
			if (!system) {
				return responseHandler.notFound(
					res,
					"Không tìm thấy hệ thống."
				);
			}
			theater.theaterSystemId = theaterSystemId;
		}

		await theater.save();
		return responseHandler.ok(res, {
			message: "Cập nhật rạp chiếu phim thành công!",
			theater,
		});
	} catch (err) {
		console.error("Lỗi cập nhật rạp:", err);
		responseHandler.error(res);
	}
};

// Xóa (soft delete) rạp chiếu phim
const deleteTheater = async (req, res) => {
	try {
		const { theaterId } = req.params;

		const theater = await Theater.findById(theaterId);
		if (!theater || theater.isDeleted) {
			return responseHandler.notFound(
				res,
				"Không tìm thấy rạp hoặc đã bị xóa."
			);
		}

		theater.isDeleted = true;
		await theater.save();

		return responseHandler.ok(res, {
			message: "Xóa rạp chiếu phim thành công!",
		});
	} catch (err) {
		console.error("Lỗi xóa rạp:", err);
		responseHandler.error(res);
	}
};

export default {
	getTheatersBySystem,
	createTheater,
	updateTheater,
	deleteTheater,
};
